// 面试题30：包含min函数的栈
 /* 题目：定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min
  函数。在该栈中，调用min、push及pop的时间复杂度都是O(1)。
  */

  /*
  思路1：（使用辅助栈，需要额外空间）
     把每次的最小值（之前最小值和新压入栈元素较小者）都保存在辅助栈中。辅助栈的栈顶元素永远保存当前最小值。
     如果新压入栈元素小于辅助栈栈顶元素，则将该元素压入辅助栈；
     否则，再次将栈顶元素压入辅助栈。
  */

  class MinStack {
      stack<int> st;
      stack<int> st_min;
  public:

      MinStack() {

      }

      void push(int x) {
          st.push(x);
          if (!st_min.empty() && st_min.top() < x) {
              st_min.push(st_min.top());
          } else {
              st_min.push(x);
          }
      }

      void pop() {
          st.pop();
          st_min.pop();
      }

      int top() {
          return st.top();
      }

      int min() {
          return st_min.top();
      }
  };

  /*
  思路2：节省一定空间，但需要额外一次弹出
  如果当前元素大于栈顶元素，则不压入
  */
  class MinStack {
      stack<int> st;
      stack<int> st_min;
  public:

      MinStack() {

      }

      void push(int x) {
          st.push(x);
          if (st_min.empty() || st_min.top() >= x) {
              st_min.push(x);
          }
      }

      void pop() {
          if (st.top() == st_min.top()) st_min.pop();
          st.pop();
      }

      int top() {
          return st.top();
      }

      int min() {
          return st_min.top();
      }
  };